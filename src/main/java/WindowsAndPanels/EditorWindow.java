/*
 * Copyright 2022 Victor Malone.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package WindowsAndPanels;

import InnerWorkings.ApplicationHandler;
import javax.swing.JOptionPane;
import DataItems.ProjectFile;
import java.io.File;
import java.io.IOException;
import javax.swing.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * The main window of the program. <p>
 * Contains a DragAndDrop panel, ApplicationHandler, and ExportWindow.
 * 
 * @author Victor Malone
 */
public class EditorWindow extends javax.swing.JFrame {

    public DragAndDrop mainEditor;
    
    
    /**
     * Creates new form EditorWindowGUI
     */
    public EditorWindow() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileDialog = new javax.swing.JFileChooser(System.getProperty("user.dir"));
        saveFileDialog = new javax.swing.JFileChooser(System.getProperty("user.dir"));
        appHandler = new InnerWorkings.ApplicationHandler();
        exportWindow = new WindowsAndPanels.ExportWindow();
        buttonMenuPanel = new javax.swing.JPanel();
        createNodeButton = new javax.swing.JButton();
        editorScrollPane = new javax.swing.JScrollPane();
        dragAndDropPanel = new WindowsAndPanels.DragAndDrop();
        editorMenu = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        exportGameMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        editMenuUndo = new javax.swing.JMenuItem();
        editMenuRedo = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();

        openFileDialog.setDialogTitle("Open Project");
        openFileDialog.setFileFilter(new InnerWorkings.CHOICEFileFilter());

        saveFileDialog.setAcceptAllFileFilterUsed(false);
        saveFileDialog.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveFileDialog.setDialogTitle("Save Project");
        saveFileDialog.setFileFilter(new InnerWorkings.CHOICEFileFilter());

        appHandler.setView(dragAndDropPanel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NAME OF PROJECT");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1659, 1000));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        buttonMenuPanel.setBackground(new java.awt.Color(153, 153, 255));

        createNodeButton.setBackground(new java.awt.Color(153, 153, 255));
        createNodeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CreatePage_Animation.gif")));
        createNodeButton.setToolTipText("");
        createNodeButton.setBorder(null);
        createNodeButton.setDoubleBuffered(true);
        createNodeButton.setFocusable(false);
        createNodeButton.setMaximumSize(new java.awt.Dimension(201, 40));
        createNodeButton.setMinimumSize(new java.awt.Dimension(201, 40));
        createNodeButton.setPreferredSize(new java.awt.Dimension(201, 40));
        createNodeButton.setRequestFocusEnabled(false);
        createNodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNodeButtonActionPerformed(evt);
            }
        });
        buttonMenuPanel.add(createNodeButton);

        editorScrollPane.setViewportView(dragAndDropPanel);
        // change speed of scroll bar
        editorScrollPane.getVerticalScrollBar().setUnitIncrement(15);

        dragAndDropPanel.setBackground(new java.awt.Color(204, 204, 255));
        dragAndDropPanel.setController(appHandler);
        dragAndDropPanel.setFont(new java.awt.Font("DFPOP1-W9", 0, 18)); // NOI18N
        dragAndDropPanel.setMinimumSize(new java.awt.Dimension(2000, 1000));
        dragAndDropPanel.setPreferredSize(new java.awt.Dimension(2000, 1500));

        javax.swing.GroupLayout dragAndDropPanelLayout = new javax.swing.GroupLayout(dragAndDropPanel);
        dragAndDropPanel.setLayout(dragAndDropPanelLayout);
        dragAndDropPanelLayout.setHorizontalGroup(
            dragAndDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );
        dragAndDropPanelLayout.setVerticalGroup(
            dragAndDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1500, Short.MAX_VALUE)
        );

        mainEditor = dragAndDropPanel;

        editorScrollPane.setViewportView(dragAndDropPanel);

        editorMenu.setName(""); // NOI18N

        menuFile.setText("File");

        saveMenuItem.setText("Save...");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        menuFile.add(saveMenuItem);

        newMenuItem.setText("New...");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        menuFile.add(newMenuItem);

        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        menuFile.add(openMenuItem);

        exportGameMenuItem.setText("Export Game...");
        exportGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportGameMenuItemActionPerformed(evt);
            }
        });
        menuFile.add(exportGameMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        menuFile.add(exitMenuItem);

        editorMenu.add(menuFile);

        menuEdit.setText("Edit");

        editMenuUndo.setText("Undo");
        editMenuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuUndoActionPerformed(evt);
            }
        });
        menuEdit.add(editMenuUndo);

        editMenuRedo.setText("Redo");
        editMenuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuRedoActionPerformed(evt);
            }
        });
        menuEdit.add(editMenuRedo);

        editorMenu.add(menuEdit);

        helpMenu.setText("Help");

        helpMenuItem.setText("Quick Guide");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        editorMenu.add(helpMenu);

        setJMenuBar(editorMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editorScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1647, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editorScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Begins a new file.
     * 
     * @param evt Unused.
     */
    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        System.out.println("File menu: New button pressed.");
        appHandler.setProjectFile(new ProjectFile());
        this.setTitle(appHandler.getProjectFile().getProjectTitle());
        
        this.revalidate();
        this.repaint();
        // JOptionPane.showMessageDialog(editorPanel, "You pressed the New menu option!");
    }//GEN-LAST:event_newMenuItemActionPerformed

    /**
     * Opens file selected via dialog and loads it. If file fails to load, a notice is shown instead.
     * 
     * @param evt Unused.
     */
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        String prevTitle = this.getTitle();
        ProjectFile currentProject = this.appHandler.getProjectFile();
        
        try {
            int returnValue = openFileDialog.showOpenDialog(this);
            System.out.println(""); // for clarity

            if (returnValue == JFileChooser.APPROVE_OPTION) {

                appHandler.loadProject(openFileDialog.getSelectedFile());
                this.setTitle(appHandler.getProjectFile().getProjectTitle());
                dragAndDropPanel.setNodes(appHandler.getNodes());
                this.revalidate();
                this.repaint();
            }
            else {
                System.out.println("Load not approved...");
            }
        }
        catch (java.awt.HeadlessException e1) {
            e1.printStackTrace();
        }
        catch (IOException | ClassNotFoundException ex) {
            System.out.println("There was a problem loading the file.");
            JOptionPane.showMessageDialog(this,"File could not be loaded. Please try a different file.");
            Logger.getLogger(EditorWindow.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
      System.out.println("Load approved!");
    }//GEN-LAST:event_openMenuItemActionPerformed

    /**
     * Shows a JOptionPane stating that the Undo and Redo functions have yet to be implemented.
     * 
     * @param evt Unused.
     */
    private void editMenuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuUndoActionPerformed
       JOptionPane.showMessageDialog(this, "The Undo and Redo functions have not yet been implemented. Please look forward to the 2.0 release!");
    }//GEN-LAST:event_editMenuUndoActionPerformed

    /**
     * Exits the program. 
     * 
     * @param evt Unused.
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * Creates a node, then asks the user to enter a title.
     * 
     * @param evt Unused.
     */
    private void createNodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNodeButtonActionPerformed
        System.out.println("Create Node button pressed! This is how the user will be able to add new nodes.");
        this.editorScrollPane.getVerticalScrollBar().setValue(0);
        this.editorScrollPane.getHorizontalScrollBar().setValue(0);
        appHandler.openCreatePage();        
        
        mainEditor.revalidate();
        mainEditor.repaint();
    }//GEN-LAST:event_createNodeButtonActionPerformed

    /**
     * Allows the user to select a directory and name before saving the project as a .choice file.
     * 
     * @param evt Unused.
     */
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        
        // for saving files
        try {
            
            int returnValue = saveFileDialog.showSaveDialog(this);
            
            if (returnValue == JFileChooser.APPROVE_OPTION)
            {                
                // add proper extension if not added manually
                File saveFile = saveFileDialog.getSelectedFile();
                if (!(saveFile.getAbsolutePath().endsWith(appHandler.extension)))
                {
                    saveFile = new File(saveFileDialog.getSelectedFile() + appHandler.extension);   // add extension
                }
                
                // If file exists, ask to overwrite
                {
                if (saveFile.exists())
                        {
                            int overwrite = JOptionPane.showConfirmDialog(this, "Would you like to overwrite the existing file?", "Overwrite file?", JOptionPane.YES_NO_OPTION);
                            
                            if (!(overwrite == JOptionPane.YES_OPTION)) // if not "yes"
                            {
                                return; // cancel.
                            }
                        }
            }
                String projectName = saveFile.getName().substring(0, saveFile.getName().length() - 7);  // remove extension
                appHandler.getProjectFile().setProjectTitle(projectName);    // sets project name
                appHandler.saveProject(saveFile);   // saves file!
                
                this.setTitle(appHandler.getProjectFile().getProjectTitle());
                System.out.println("File saved!");
            }
                else
                {
                    System.out.println("Unable to save.");
                }
            
        } catch (java.awt.HeadlessException e1) {
            e1.printStackTrace();
        }
        catch (IOException ex)
        {
            System.out.println("There was a problem saving the file.");
            Logger.getLogger(EditorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.repaint();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        /*
        System.out.println("Key Pressed!");
        // appHandler.updateView();
        dragAndDropPanel.showControllerNodeStats();
        */
    }//GEN-LAST:event_formKeyTyped

    /**
     * Sets the title of the window along with appHandler's frame upon opening.
     * 
     * @param evt Unused.
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setTitle(appHandler.getProjectFile().getProjectTitle());
        appHandler.setFrame(this);
    }//GEN-LAST:event_formWindowOpened

    /**
     * Sets the export window's visibility to true, and sends the appHandler's project file to it for exportation.
     * 
     * @param evt Unused.
     */
    private void exportGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportGameMenuItemActionPerformed
        if (appHandler.getProjectFile().getNodes().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Your project is empty... You need at least one page to export!");
        }
        else
        {
            exportWindow.setProject(appHandler.getProjectFile());
            exportWindow.setVisible(true);
        }
    }//GEN-LAST:event_exportGameMenuItemActionPerformed

   /**
     * Shows a JOptionPane stating that the Undo and Redo functions have yet to be implemented.
     * 
     * @param evt Unused.
     */
    private void editMenuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuRedoActionPerformed
        JOptionPane.showMessageDialog(this, "The Undo and Redo functions have not yet been implemented. Please look forward to the 2.0 release!");
    }//GEN-LAST:event_editMenuRedoActionPerformed

  /**
     * Shows a JOption pane that explains the basic functions of the program.
     * 
     * @param evt Unused.
     */
    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
         JOptionPane.showMessageDialog(this, "<html> <font size= \"+1\">"
                 + "<strong>Welcome, and thank you for using CHOICE!</strong><br><br>"
                 + ""
                 + "Use the <strong>\"Create Page\"</strong> button to your left to... well, create a page! You'll then give it a <strong>name</strong>, and from there, you'll be allowed to edit it freely in the <strong>Page Editor</strong>.<br>"
                 + "Write whatever you want in the <strong>\"Paragraph\"</strong> section, and then come up with an <strong>ID</strong> that suits it well. You'll use this for creating your <strong>links</strong>.<br>"
                 + "To create a link from one page to another, click the \"+\" button, and <strong>choose the destination page's ID</strong> from the drop-down box. <br>"
                 + "To the right of your choice, write the text that goes along with it. \"Turn left\" or \"Enter the strange door\", for example. (A page may link back to itself.)<br>"
                 + "To remove a link, click the \"-\" button. This will remove the link closest to the bottom of the page.<br>"
                 + "After you're all done, click the OK button to save your changes! <br>"
                 + "Also, right-click on a page to delete it.<br><br>"
                 + "Once you're done writing all the pages of your story, go to the File menu at the top left, and click <strong>\"Export Game\"</strong>. <br>"
                 + "Play with the settings, choose a location to save in, and then <strong>Make your CHOICE</strong>!"
                 + "</font></html>");
    }//GEN-LAST:event_helpMenuItemActionPerformed

    
    //Getters and Setters
    public ApplicationHandler getAppHandler() {
        return appHandler;
    }

    public void setAppHandler(ApplicationHandler appHandler) {
        this.appHandler = appHandler;
    }

    public DragAndDrop getDragAndDropPanel() {
        return dragAndDropPanel;
    }

    public void setDragAndDropPanel(DragAndDrop dragAndDropPanel) {
        this.dragAndDropPanel = dragAndDropPanel;
    }

    /**
     * Creates and displays the frame.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
          /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private InnerWorkings.ApplicationHandler appHandler;
    private javax.swing.JPanel buttonMenuPanel;
    private javax.swing.JButton createNodeButton;
    private WindowsAndPanels.DragAndDrop dragAndDropPanel;
    private javax.swing.JMenuItem editMenuRedo;
    private javax.swing.JMenuItem editMenuUndo;
    private javax.swing.JMenuBar editorMenu;
    private javax.swing.JScrollPane editorScrollPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportGameMenuItem;
    private WindowsAndPanels.ExportWindow exportWindow;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JFileChooser openFileDialog;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JFileChooser saveFileDialog;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
}
