/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package EditorWindowPackage;

import InnerWorkings.ApplicationHandler;
import javax.swing.JOptionPane;
import InnerWorkings.DragAndDrop;
import InnerWorkings.MyFileFilter;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;

/**
 *
 * @author rolep
 */
public class EditorWindow extends javax.swing.JFrame {

    public DragAndDrop mainEditor;
    
    
    /**
     * Creates new form EditorWindowGUI
     */
    public EditorWindow() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileDialog = new javax.swing.JFileChooser(System.getProperty("user.dir"));
        saveFileDialog = new javax.swing.JFileChooser(System.getProperty("user.dir"));
        appHandler = new InnerWorkings.ApplicationHandler();
        buttonMenuPanel = new javax.swing.JPanel();
        createNodeButton = new javax.swing.JButton();
        loadTestButton = new javax.swing.JButton();
        saveTestButton = new javax.swing.JButton();
        editorLayeredPane = new javax.swing.JLayeredPane();
        dragAndDropPanel = new InnerWorkings.DragAndDrop();
        editorMenu = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        fileMenuSave = new javax.swing.JMenuItem();
        fileMenuNew = new javax.swing.JMenuItem();
        fileMenuOpen = new javax.swing.JMenuItem();
        fileMenuProjectSettings = new javax.swing.JMenuItem();
        fileMenuExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        editMenuUndo = new javax.swing.JMenuItem();
        editMenuRedo = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        viewMenuReturnToStart = new javax.swing.JMenuItem();

        openFileDialog.setDialogTitle("Open Project");
        openFileDialog.setFileFilter(new MyFileFilter());
        openFileDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileDialogActionPerformed(evt);
            }
        });

        saveFileDialog.setAcceptAllFileFilterUsed(false);
        saveFileDialog.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveFileDialog.setDialogTitle("Save Project");
        saveFileDialog.setFileFilter(new MyFileFilter());
        saveFileDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileDialogActionPerformed(evt);
            }
        });

        appHandler.setView(dragAndDropPanel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NAME OF PROJECT");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        buttonMenuPanel.setBackground(new java.awt.Color(255, 255, 102));

        createNodeButton.setText("Create Node");
        createNodeButton.setEnabled(false);
        createNodeButton.setRequestFocusEnabled(false);
        createNodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNodeButtonActionPerformed(evt);
            }
        });

        loadTestButton.setText("Load");
        loadTestButton.setEnabled(false);

        saveTestButton.setText("Save As...");
        saveTestButton.setEnabled(false);
        saveTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTestButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonMenuPanelLayout = new javax.swing.GroupLayout(buttonMenuPanel);
        buttonMenuPanel.setLayout(buttonMenuPanelLayout);
        buttonMenuPanelLayout.setHorizontalGroup(
            buttonMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNodeButton)
                .addGap(18, 18, 18)
                .addComponent(loadTestButton)
                .addGap(18, 18, 18)
                .addComponent(saveTestButton)
                .addContainerGap(762, Short.MAX_VALUE))
        );
        buttonMenuPanelLayout.setVerticalGroup(
            buttonMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonMenuPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createNodeButton)
                    .addComponent(loadTestButton)
                    .addComponent(saveTestButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dragAndDropPanel.setBackground(new java.awt.Color(204, 204, 255));
        dragAndDropPanel.setController(appHandler);
        dragAndDropPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dragAndDropPanelKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout dragAndDropPanelLayout = new javax.swing.GroupLayout(dragAndDropPanel);
        dragAndDropPanel.setLayout(dragAndDropPanelLayout);
        dragAndDropPanelLayout.setHorizontalGroup(
            dragAndDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        dragAndDropPanelLayout.setVerticalGroup(
            dragAndDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
        );

        mainEditor = dragAndDropPanel;

        editorLayeredPane.setLayer(dragAndDropPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout editorLayeredPaneLayout = new javax.swing.GroupLayout(editorLayeredPane);
        editorLayeredPane.setLayout(editorLayeredPaneLayout);
        editorLayeredPaneLayout.setHorizontalGroup(
            editorLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dragAndDropPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        editorLayeredPaneLayout.setVerticalGroup(
            editorLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dragAndDropPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        editorMenu.setName(""); // NOI18N

        menuFile.setText("File");

        fileMenuSave.setText("Save...");
        fileMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuSaveActionPerformed(evt);
                fileMenuSaveActionPerformed1(evt);
            }
        });
        menuFile.add(fileMenuSave);

        fileMenuNew.setText("New...");
        fileMenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuNewActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuNew);

        fileMenuOpen.setText("Open...");
        fileMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuOpenActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuOpen);

        fileMenuProjectSettings.setText("Project Settings");
        fileMenuProjectSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuProjectSettingsActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuProjectSettings);

        fileMenuExit.setText("Exit");
        fileMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuExitActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuExit);

        editorMenu.add(menuFile);

        menuEdit.setText("Edit");

        editMenuUndo.setText("Undo");
        editMenuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuUndoActionPerformed(evt);
            }
        });
        menuEdit.add(editMenuUndo);

        editMenuRedo.setText("Redo");
        menuEdit.add(editMenuRedo);

        editorMenu.add(menuEdit);

        menuView.setText("View");

        viewMenuReturnToStart.setText("Return to Start");
        menuView.add(viewMenuReturnToStart);

        editorMenu.add(menuView);

        setJMenuBar(editorMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(editorLayeredPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editorLayeredPane))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fileMenuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuNewActionPerformed
        System.out.println("File menu: New button pressed.");
        // JOptionPane.showMessageDialog(editorPanel, "You pressed the New menu option!");
    }//GEN-LAST:event_fileMenuNewActionPerformed

    private void fileMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuOpenActionPerformed

        try {
            int returnValue = openFileDialog.showOpenDialog(this);
            System.out.println(""); // for clarity

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                System.out.println("Approved!");

                appHandler.loadProject(openFileDialog.getSelectedFile());
                dragAndDropPanel.setNodes(appHandler.getNodes());
                dragAndDropPanel.repaint();
            }
            else {
                System.out.println("Not approved...");
            }

        }
        catch (java.awt.HeadlessException e1) {
            e1.printStackTrace();
        }
        catch (IOException ex) {
            System.out.println("Problem loading file.");
            Logger.getLogger(EditorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex) {
            Logger.getLogger(EditorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fileMenuOpenActionPerformed

    private void editMenuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuUndoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editMenuUndoActionPerformed

    private void fileMenuProjectSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuProjectSettingsActionPerformed
        new ProjectSettingsMenu().setVisible(true);
    }//GEN-LAST:event_fileMenuProjectSettingsActionPerformed

    private void fileMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_fileMenuExitActionPerformed

    private void createNodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNodeButtonActionPerformed
        System.out.println("JButton1 pressed! This is how the user will be able to add new nodes.");
        mainEditor.addNode(100, 100);
    }//GEN-LAST:event_createNodeButtonActionPerformed

    private void fileMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuSaveActionPerformed
        
        // for saving files
        try {
            
            int returnValue = saveFileDialog.showSaveDialog(this);
            
            if (returnValue == JFileChooser.APPROVE_OPTION)
            {                
                // add proper extension if not added manually
                File saveFile = saveFileDialog.getSelectedFile();
                if (!(saveFile.getAbsolutePath().endsWith(appHandler.extension)))
                {
                    saveFile = new File(saveFileDialog.getSelectedFile() + appHandler.extension);   // add extension
                }
                
                // If file exists, ask to overwrite
                {
                if (saveFile.exists())
                        {
                            int overwrite = JOptionPane.showConfirmDialog(this, "Would you like to overwrite the existing file?", "Overwrite file?", JOptionPane.YES_NO_OPTION);
                            
                            if (!(overwrite == JOptionPane.YES_OPTION)) // if not "yes"
                            {
                                return; // cancel.
                            }
                        }
            }
                
                appHandler.saveProject(saveFile);   // saves file!
                System.out.println("File saved!");
            }
                else
                {
                    System.out.println("Unable to save.");
                }
            
        } catch (java.awt.HeadlessException e1) {
            e1.printStackTrace();
        }
        catch (IOException ex)
        {
            System.out.println("Problem saving file.");
            Logger.getLogger(EditorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fileMenuSaveActionPerformed

    private void saveTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTestButtonActionPerformed
        try {
            saveFileDialog.showSaveDialog(this);
        } catch (java.awt.HeadlessException e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_saveTestButtonActionPerformed

    private void dragAndDropPanelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dragAndDropPanelKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_dragAndDropPanelKeyTyped

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped

           System.out.println("Key Pressed!");
        dragAndDropPanel.showControllerNodeStats();
       
    }//GEN-LAST:event_formKeyTyped

    private void saveFileDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileDialogActionPerformed

    }//GEN-LAST:event_saveFileDialogActionPerformed

    private void openFileDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileDialogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openFileDialogActionPerformed

    private void fileMenuSaveActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuSaveActionPerformed1
        saveFileDialog.setVisible(true);
    }//GEN-LAST:event_fileMenuSaveActionPerformed1

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
          /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private InnerWorkings.ApplicationHandler appHandler;
    private javax.swing.JPanel buttonMenuPanel;
    private javax.swing.JButton createNodeButton;
    private InnerWorkings.DragAndDrop dragAndDropPanel;
    private javax.swing.JMenuItem editMenuRedo;
    private javax.swing.JMenuItem editMenuUndo;
    private javax.swing.JLayeredPane editorLayeredPane;
    private javax.swing.JMenuBar editorMenu;
    private javax.swing.JMenuItem fileMenuExit;
    private javax.swing.JMenuItem fileMenuNew;
    private javax.swing.JMenuItem fileMenuOpen;
    private javax.swing.JMenuItem fileMenuProjectSettings;
    private javax.swing.JMenuItem fileMenuSave;
    private javax.swing.JButton loadTestButton;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuView;
    private javax.swing.JFileChooser openFileDialog;
    private javax.swing.JFileChooser saveFileDialog;
    private javax.swing.JButton saveTestButton;
    private javax.swing.JMenuItem viewMenuReturnToStart;
    // End of variables declaration//GEN-END:variables
}
